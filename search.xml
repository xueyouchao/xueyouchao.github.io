<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Lock Free Ring Queue for Multi-producer and Multi-consumer]]></title>
      <url>https://xueyouchao.github.io/2017/02/26/Lock-Free-Ring-Queue-for-Multi-producer-and-Multi-consumer/</url>
      <content type="html"><![CDATA[<p>Lock-free Ring Queue - What is it? In a nutshell: it is a data structure facilitating inter-thread messaging communication.</p>
<h3 id="a-little-history">A little history</h3>
<ul>
<li>Lock-free ring queue datastructure attracted a lot of attention in the concurrency world because of the name LMAX Disruptor in <a href="http://www.oracle.com/us/corporate/press/512656" target="_blank" rel="external">2011</a>. You can still find the presentation back on Dec 2010 <a href="https://www.infoq.com/presentations/LMAX" target="_blank" rel="external">here</a>. Never heared of Disruptor? Spring framework uses it undernearth since <a href="https://spring.io/blog/2013/11/12/it-can-t-just-be-big-data-it-has-to-be-fast-data-reactor-1-0-goes-ga" target="_blank" rel="external">2013</a>.</li>
<li>The lock-free ring queue is at the core of Disruptor.<br>
</li>
<li>The same data structure was in BSD code back in <a href="https://svnweb.freebsd.org/base/head/sys/sys/buf_ring.h?view=markup&amp;pathrev=185162" target="_blank" rel="external">2008</a>.<br>
</li>
<li>The same data structure is used in <a href="http://lxr.free-electrons.com/source/include/linux/kfifo.h" target="_blank" rel="external">linux kernel</a>.<br>
</li>
<li>Also in famous intel <a href="http://dpdk.org/browse/dpdk/tree/lib/librte_ring/rte_ring.h" target="_blank" rel="external">DPDK framework</a>.</li>
</ul>
<h3 id="why-redo-the-wheel-in-c11">Why redo the wheel in C++11 ?</h3>
<p>You might ask there are so many implementations available now, why do we redo it in c++11?</p>
<p>One of the biggest benefit C++11 brought to us IMHO is its multithreading memory model and atomics library. Imagine without these two how much work do you need to do to make sure your multi-threading code will run correctly on different OS and CPU architecture. In the multi-core hardware era c++11 brought us powerful weapons that enable both sequential consistency and weakly ordered multithreading models for our multithreading programming to squeeze our hardware’s true power. We have a good start then we can build up better world to compete with Java, Rust, Go, Clojure,Erlang, Haskell, Scala etc. in this concurrent world.</p>
<h3 id="talk-is-cheap-show-me-the-code">Talk is cheap, show me the code</h3>
<p>Here I will present a deadly simple lock-free MPMC(multi-producer, multi-consumer) ring queue implementation in c++11. The C implementation can be found at dpdk <a href="http://dpdk.org/browse/dpdk/tree/lib/librte_ring" target="_blank" rel="external">git</a>. Ring queue’s documentation can be also found at dpdk <a href="http://dpdk.org/doc/guides/prog_guide/ring_lib.html" target="_blank" rel="external">site</a>.</p>
<p>In my simplest version, I have only implemented push/pop so far for an easy start; no bulk operations, no watermark notification, no dynamic size adjustments for the buffer.</p>
<pre><code>constexpr uint64_t RING_BUFFER_SIZE = 2 &lt;&lt; 10;
constexpr uint64_t CACHE_LINE_SIZE = 64;

template &lt;class T&gt;
class ring_buffer_queue{

private:
    const static uint32_t size = RING_BUFFER_SIZE;
    const static uint32_t mask = size - 1;

    struct prod {
        std::atomic&lt;uint32_t&gt;  alignas(CACHE_LINE_SIZE) first;
        std::atomic&lt;uint32_t&gt;  alignas(CACHE_LINE_SIZE) second;
    }writer;

    struct consumer {
        std::atomic&lt;uint32_t&gt;  alignas(CACHE_LINE_SIZE) first;
        std::atomic&lt;uint32_t&gt;  alignas(CACHE_LINE_SIZE) second;
    }reader;

    simple_spin_wait spinlock;

    T* alignas(CACHE_LINE_SIZE) buffer[size];
public:

    ring_buffer_queue()
    {
        writer.first.store(0);
        writer.second.store(0);
        reader.first.store(0);
        reader.second.store(0);
    }

    inline int multiple_producer_push(T* obj, uint32_t num = 1) {
        uint32_t head, tail, next;

        bool success = false;
        do {
            head = writer.first.load(std::memory_order_acquire);
            tail = reader.second.load(std::memory_order_acquire);

            //check if queue is full
            if ((head - tail + 1)&gt;mask)
                return-1;

            next = head + num;
            success = writer.first.compare_exchange_weak(head, next, std::memory_order_release);
        } while (!success);

        buffer[head &amp; mask] = obj;
        std::atomic_thread_fence(std::memory_order_release);

        //to ensure FIFO feature of queue

        while (writer.second.load(std::memory_order_acquire) != head) {
            spinlock.wait();
        }

        writer.second.store(next, std::memory_order_release);

        spinlock.notify();

        return 0;
    }

    inline int multiple_producer_pop(T&amp; ret, uint32_t num = 1) {
        uint32_t head, tail, next;

        bool success = false;
        do {
            tail = reader.first.load(std::memory_order_acquire);
            head = writer.second.load(std::memory_order_acquire);

            //check if queue is empty
            if (head == tail)
                return -1;

            next = tail + num;
            success = reader.first.compare_exchange_weak(tail, next, std::memory_order_release);
        } while (!success);

        ret = *buffer[tail &amp; mask];
        std::atomic_thread_fence(std::memory_order_acquire);

        //to ensure FIFO feature of queue
        while (reader.second.load(std::memory_order_acquire) != tail) {
            spinlock.wait();
        }

        reader.second.store(next, std::memory_order_release);

        spinlock.notify();

        return 0;
    }

};</code></pre>
<h3 id="class-memebers">Class Memebers</h3>
<p>First let’s look at ring queue class members:</p>
<p>A few points to mention here:</p>
<ul>
<li><p>The fixed size of ring queue is usually power of 2, the reason for this is that you can use <code>pointer &amp; (RING_BUFFER_SIZE-1)</code> instead of <code>pointer % RING_BUFFER_SIZE</code> for a pointer to circle back and point to the beginning of the ring queue.</p></li>
<li><p>The prod/consumer each contains first/second pointers (equivalent to prod/consumer’s head and tail in DPDK). The reason it needs first and second pointers is explained down below.</p></li>
<li><p><code>alignas(CACHE_LINE_SIZE)</code> used here is to prevent false sharing to happen. If you don’t know what is false sharing, <a href="https://nativecoding.wordpress.com/2015/06/19/multithreading-multicore-programming-and-false-sharing-benchmark/" target="_blank" rel="external">here</a> is a simple and excellent explanation. Before c++11 this is done through padding chars, but now we can use new syntax <code>alignas</code>.</p></li>
<li><p>simple_spin_wait will be explained in a separate topic.</p></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> C++11 </tag>
            
            <tag> lock-free </tag>
            
            <tag> atomics </tag>
            
            <tag> Dpdk </tag>
            
            <tag> LMax Disruptor </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Journey of Emacs]]></title>
      <url>https://xueyouchao.github.io/2017/02/22/Journey-of-Emacs/</url>
      <content type="html"><![CDATA[<p>I have switched my programming environment to Manjaro Linux recently. So I started to give a try on legendary editor Emacs for development. I started with zero basics for Emacs and spent only 2 week’s spare time to get used to writing code and blog with it.</p>
<h3 id="standing-on-the-shoulders-of-giants">Standing on the Shoulders of Giants</h3>
<ul>
<li>Do not blindly start to learn Emacs commands or lisp language, learning without helping you to achieve your goal will make you give up soon. You should start from guru’s setup to achieve what you want to do and learn the commands and everyting along the way.</li>
<li>I started by taking advice from Chen Bin <a href="https://github.com/redguardtoo" target="_blank" rel="external">redguardtoo</a>. Quickly read his post <a href="https://github.com/redguardtoo/mastering-emacs-in-one-year-guide" target="_blank" rel="external">“mastering-emacs-in-one-year-guide”</a>.</li>
<li>Followed the recommendation, I spent a little time going through the emacs tutorial. ThenI downloaded his <a href="https://github.com/redguardtoo/emacs.d" target="_blank" rel="external">configuration</a> to play around.</li>
<li>Very importantly, write down the important steps. Emacs has powerful plugin management functionality, when you made so many customizations to emacs you want to make sure to write down the steps.</li>
</ul>
<h3 id="explore-the-world-of-emacs">Explore the World of Emacs</h3>
<ul>
<li>So many good things guru’s has setup for you. Try it.<br>
</li>
</ul>
<ol style="list-style-type: decimal">
<li>Spent half an hour to learn basics of Org Mode and play with M-Org-Indent-Mode in Chen’s setup. You can write down the steps using org-indent-mode as I did. <img src="/images/org-mode.png"><br>
</li>
<li>Configure neotree and install all-the-icons package for it</li>
<li>Configure c++ packages for development</li>
<li>Use Git version control in emacs with magit</li>
<li>Write blog in Markdown mode which is pretty much I am doing now. …</li>
</ol>
<h3 id="two-configurations-i-recommended">Two Configurations I Recommended</h3>
<ol style="list-style-type: decimal">
<li><p>Chen Bin’s setup <a href="%22https://github.com/redguardtoo%22">redguardtoo</a><br>
It comes with pretty much everything I need and a very clear structure inherit from Steve Purcell. The theme is very beautiful and the font colors are very comfortable for me to write programming code. Note that Chen carefully pick the stable version of ELPA packages and you need to add unstaple exceptions in his configuration file to see the package in package installation list.</p></li>
<li><p><a href="http://spacemacs.org/" target="_blank" rel="external">Spacemacs</a><br>
Spacemacs has very good documentation explaining its structure. The package management module of Spacemacs utilizes the packages as building blocks and assemble them into layers. You can customize your layers with all these building blocks. Be sure to checkout the awesome <a href="https://github.com/sellout/emacs-color-theme-solarized" target="_blank" rel="external">emacs port for solarized theme</a>. A screenshot of my spacemacs workspace shows this beautiful theme. <img src="/images/solarized-dark.png"> <img src="/images/solarized-light.png"></p></li>
<li><p>I prefer Chen’s setting. I felt it’s faster than Spacemacs and still easy for me to plugin anything else in due to the clear structure.</p></li>
</ol>
<h3 id="some-configuration-steps-i-went-through">Some Configuration Steps I Went Through</h3>
<p><a href="https://github.com/xueyouchao/todo/blob/master/EmacsToDo.org" target="_blank" rel="external">In Org Mode, best read in emacs org-indent-mode</a></p>
]]></content>
      
        
        <tags>
            
            <tag> Emacs </tag>
            
            <tag> Markdown </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Compile Time String Hashing]]></title>
      <url>https://xueyouchao.github.io/2016/11/16/CompileTimeString/</url>
      <content type="html"><![CDATA[<p>String comparison is a relatively slow operation and some times not tolerable. Especially when you have many if..else.. (or switch/case) code like this:<br>
if (mode == “StateA”) {<br>
…<br>
}<br>
else if (mode == “StateB”) {<br>
…<br>
}</p>
<p>The first thought come in mind is to use hash function to speed up the comparison operation; so we can improve the time complexity from O(<span class="math inline">\(n^2\)</span>) to O(1). How can we do better? Make the hash calculation on compile time so it saves some extra run-time cost for constant string hash calculation and let the compiler do the job for you.</p>
<h3 id="c98-solutions">c++98 solutions</h3>
<p>Before c++11, c++98 solutions are not perfect. Such as:</p>
<ul>
<li><a href="http://www.gamasutra.com/view/news/127915/InDepth_Quasi_CompileTime_String_Hashing.php" target="_blank" rel="external">quasi compile time string hashing</a><br>
Cons: This solution does not work for “switch/case” statements.<br>
</li>
<li><a href="http://arcticinteractive.com/2009/04/18/compile-time-string-hashing-boost-mpl/" target="_blank" rel="external">using Boost.MPL</a><br>
Cons: This solution needs to separate strings into groups.</li>
</ul>
<h3 id="c11c14-solutions">c++11/c++14 solutions</h3>
<p>In c++11/c++14, constexpr provides us a new way to the perfect solution for compile time string hashing. However different c++ compilers support the new standard differently and we still need to make sure the code is fully tested on multiple compilers.</p>
<p>So first let’s first pick up an easy Hash function to start. The trick is to utilize the c++11</p>
<ul>
<li>template/macro (two ways for compile time processing)</li>
<li>constexpr syntax</li>
</ul>
<p>to pre-calculate the hash value and sometimes with the help of template recursion in compile time.</p>
<h4 id="example-a">Example A</h4>
<p>Java string’s hashCode() is one of the simplest hash function which uses <a href="https://en.wikipedia.org/wiki/Horner&#39;s_method" target="_blank" rel="external">Horner’s method</a>: <span class="math display">\[h = s[0] * 31^\left(n-1\right)+s[1] * 31^\left(n-2\right) + ... + s[n-1]\]</span></p>
<p>It’s not hard to deduce the following iterative equation:</p>
<p><span class="math display">\[h = h * 31 + s[n-1]\]</span></p>
<p>Based on this recusive nature you can write a simple recursive c++ function:</p>
<pre><code>template &lt;size_t N&gt;
constexpr inline size_t HORNER_HASH(size_t prime, const char (&amp;str)[N], size_t Len = N-1)
{
    return (Len &lt;= 1) ? str[0] : (prime * HORNER_HASH(prime, str, Len-1) + str[Len-1]);
}
#define CompileTimeHash1(x) (HORNER_HASH(31, x))
</code></pre>
<p>If you are not familiar with syntax <code>const char (&amp;str)[N]</code> Stefan Reinalter gave an explanation <a href="https://blog.molecular-matters.com/2011/06/22/subtle-differences-in-c/" target="_blank" rel="external">here</a>.</p>
<p>Note <code>N</code> is deduced to be <code>sizeof(str)</code> which including the null terminator for c string so we have to pass <code>N-1</code> as the length of c string.</p>
<p>The following testing code validates if the runtime hash function generates the same result as the compile time hash function both in <code>if</code> and <code>switch</code> statements.</p>
<pre><code>#include &lt;stdio.h&gt;

template &lt;size_t N&gt;
constexpr inline size_t HORNER_HASH(size_t prime, const char (&amp;str)[N], size_t Len = N-1)
{
    return (Len &lt;= 1) ? str[0] : (prime * HORNER_HASH(prime, str, Len-1) + str[Len-1]);
}

#define COMPILE_HORNER_HASH(x) (HORNER_HASH(31, x))

size_t RUNTIME_HORNER_HASH(size_t prime, char const* str)
{
    if (str == NULL) return 0;
    size_t hash = *str;
    for (; *(str+1)!=0; str++)
    {
      hash = prime * hash + *(str+1);
    }
    return hash;
}

int main()
{
    const char* currentState = &quot;StateA&quot;;
    if (RUNTIME_HORNER_HASH(31,currentState) == COMPILE_HORNER_HASH(&quot;StateA&quot;))
        printf(&quot;if statement test success!\n&quot;);
    switch (RUNTIME_HORNER_HASH(31,currentState))
    {
        case COMPILE_HORNER_HASH(&quot;StateA&quot;):
        printf(&quot;switch statement test success!\n&quot;);
        break;
    }
    return 1;
}
</code></pre>
]]></content>
      
        
        <tags>
            
            <tag> C++11 </tag>
            
            <tag> c++14 </tag>
            
            <tag> Hashing </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
